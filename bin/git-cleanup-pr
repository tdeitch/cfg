#!/bin/bash

# git-cleanup-pr
# This script cleans up after the successful merge of a repository that
# conforms to certain conventions.
#
# The PR branch must be on the remote `origin`.
# The main branch must be on the remote `upstream`.
# The main branch must be called either `develop` or `master`.
# The PR branch must be the current branch or passed as an argument.

set -e

function main {
    check_remote_exists $origin
    check_remote_exists $upstream
    echo "Deleting $prbranch and updating $mainbranch."
    if [ "$prbranch" = "$(get_current_branch)" ]; then
        git checkout $mainbranch
    fi
    update_main_branch
    delete_pr_branch
    echo "Deleted $prbranch and updated $mainbranch."
    echo
    git show --stat $mainbranch
}

function get_main_branch {
    if branch_exists develop; then
        echo "develop"
    elif branch_exists master; then
        echo "master"
    else
        (>&2 echo "Could not infer main branch of repository.")
        exit 1
    fi
}

function get_current_branch {
    git symbolic-ref --short HEAD
}

function get_first_non_empty {
    echo $1
}

function branch_exists {
    branchname=$1
    git rev-parse --verify $branchname &> /dev/null;
}

function check_remote_exists {
    remotename=$1
    if ! git remote | grep -q '^'$remotename'$'; then
        (>&2 echo "Remote $remotename does not exist.")
        exit 1
    fi
}

function update_main_branch {
    if [ "$(get_current_branch)" = "$mainbranch" ]; then
        git pull --ff-only $upstream $mainbranch
    else
        git fetch $upstream $mainbranch:$mainbranch
    fi
    git push --no-verify $origin $mainbranch
}

function delete_pr_branch {
    git branch -D $prbranch
    git push --no-verify --delete $origin $prbranch || git branch -r -d $origin/$prbranch
}

origin=origin
upstream=upstream
mainbranch=$(get_main_branch)
prbranch=$(get_first_non_empty $1 $(get_current_branch))

main
