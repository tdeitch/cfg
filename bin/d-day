#!/usr/bin/env python3

import json
import sys

from argparse import ArgumentParser
from datetime import date
from os import path

CONFIG_FILE = path.expanduser('~/.d-day')

def err(should_err, msg):
  if should_err:
    print(msg, file=sys.stderr)
    exit(1)

def get_conf(err_on_empty=True):
  try:
    with open(CONFIG_FILE) as f:
      return json.load(f)
  except:
    err(err_on_empty, "Config not found. Try running with --add?")
    return []

def set_conf(conf):
  with open(CONFIG_FILE, 'w') as f:
    json.dump(conf, f)

def parse_args():
  parser = ArgumentParser(description='Count down the days until some event.')
  parser.add_argument('--add', action='store_true', help='add a new event')
  parser.add_argument('--delete', action='store', metavar='n', type=int, help='delete the specified event')
  return parser.parse_args()

def add_dday():
  ddays = get_conf(err_on_empty=False)
  end_date = input("End date (YYYY-MM-DD): ")
  message = input("Message: ")
  ddays.append({'end_date': end_date, 'message': message})
  set_conf(ddays)

def delete_dday(i):
  ddays = get_conf()
  err(i < 1 or i > len(ddays), "An event with this number does not exist.")
  del ddays[i-1]
  set_conf(ddays)

def get_ddays():
  conf = get_conf()
  for i, dday in enumerate(conf):
    days_left = (date.fromisoformat(dday['end_date']) - date.today()).days
    print("({}) {} days left: {}".format(i+1, days_left, dday['message']))

def main():
  args = parse_args()
  if args.add:
    add_dday()
  elif type(args.delete) is int:
    delete_dday(args.delete)
  else:
    get_ddays()

main()
